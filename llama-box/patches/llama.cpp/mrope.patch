diff --git a/common/common.cpp b/common/common.cpp
index bd20af23..6948331e 100644
--- a/common/common.cpp
+++ b/common/common.cpp
@@ -903,6 +903,11 @@ struct common_init_result common_init_from_params(common_params & params) {
 
     auto cparams = common_context_params_to_llama(params);
 
+    if (llama_model_rope_type(model) == LLAMA_ROPE_TYPE_MROPE) {
+        LOG_INF("%s: model requires M-RoPE, increasing batch size by 4x\n", __func__);
+        cparams.n_batch *= 4;
+    }
+
     llama_context * lctx = llama_init_from_model(model, cparams);
     if (lctx == NULL) {
         LOG_ERR("%s: failed to create context with model '%s'\n", __func__, params.model.path.c_str());
diff --git a/ggml/src/ggml-cpu/ops.cpp b/ggml/src/ggml-cpu/ops.cpp
index 955fec59..155650ac 100644
--- a/ggml/src/ggml-cpu/ops.cpp
+++ b/ggml/src/ggml-cpu/ops.cpp
@@ -5132,10 +5132,6 @@ static void ggml_compute_forward_rope_f32(
     const bool is_mrope = mode & GGML_ROPE_TYPE_MROPE;  // ggml_rope_multi, multimodal rotary position embedding
     const bool is_vision = mode == GGML_ROPE_TYPE_VISION;
 
-    if (is_mrope) {
-        GGML_ASSERT(sections[0] > 0 || sections[1] > 0 || sections[2] > 0);
-    }
-
     if (is_vision) {
         GGML_ASSERT(n_dims == ne0/2);
     }
@@ -5318,10 +5314,6 @@ static void ggml_compute_forward_rope_f16(
     const bool is_mrope = mode & GGML_ROPE_TYPE_MROPE;
     const bool is_vision = mode == GGML_ROPE_TYPE_VISION;
 
-    if (is_mrope) {
-        GGML_ASSERT(sections[0] > 0 || sections[1] > 0 || sections[2] > 0);
-    }
-
     if (is_vision) {
         GGML_ASSERT(n_dims == ne0/2);
     }
diff --git a/ggml/src/ggml-cuda/rope.cu b/ggml/src/ggml-cuda/rope.cu
index 18f691b2..f5a4da3a 100644
--- a/ggml/src/ggml-cuda/rope.cu
+++ b/ggml/src/ggml-cuda/rope.cu
@@ -377,10 +377,6 @@ void ggml_cuda_op_rope_impl(ggml_backend_cuda_context & ctx, ggml_tensor * dst)
     const bool is_mrope = mode & GGML_ROPE_TYPE_MROPE;
     const bool is_vision = mode == GGML_ROPE_TYPE_VISION;
 
-    if (is_mrope) {
-        GGML_ASSERT(sections.v[0] > 0 || sections.v[1] > 0 || sections.v[2] > 0);
-    }
-
     if (is_vision) {
         GGML_ASSERT(n_dims == ne00/2);
     }
diff --git a/ggml/src/ggml-metal/ggml-metal-impl.h b/ggml/src/ggml-metal/ggml-metal-impl.h
index 8721b272..fb5836d4 100644
--- a/ggml/src/ggml-metal/ggml-metal-impl.h
+++ b/ggml/src/ggml-metal/ggml-metal-impl.h
@@ -181,6 +181,11 @@ typedef struct {
     bool     inplace;
 } ggml_metal_kargs_set;
 
+
+typedef struct  {
+    int32_t v[4];
+} ggml_metal_kargs_rope_mrope_sections;
+
 typedef struct {
     int32_t  ne00;
     int32_t  ne01;
@@ -207,6 +212,9 @@ typedef struct {
     float    attn_factor;
     float    beta_fast;
     float    beta_slow;
+    bool     is_mrope;
+    bool     is_vision;
+    ggml_metal_kargs_rope_mrope_sections mrope_sections;
 } ggml_metal_kargs_rope;
 
 typedef struct {
diff --git a/ggml/src/ggml-metal/ggml-metal.m b/ggml/src/ggml-metal/ggml-metal.m
index d92392ed..a5ffe27d 100644
--- a/ggml/src/ggml-metal/ggml-metal.m
+++ b/ggml/src/ggml-metal/ggml-metal.m
@@ -1628,16 +1628,7 @@ static bool ggml_metal_supports_op(const struct ggml_backend_metal_device_contex
         case GGML_OP_NORM:
             return has_simdgroup_reduction && (op->ne[0] % 4 == 0 && ggml_is_contiguous_1(op->src[0]));
         case GGML_OP_ROPE:
-            {
-                const int mode = ((const int32_t *) op->op_params)[2];
-                if (mode & GGML_ROPE_TYPE_MROPE) {
-                    return false;
-                }
-                if (mode & GGML_ROPE_TYPE_VISION) {
-                    return false;
-                }
-                return true;
-            }
+            return true;
         case GGML_OP_IM2COL:
             return op->src[0]->type == GGML_TYPE_F16;
         case GGML_OP_POOL_1D:
@@ -3733,6 +3724,7 @@ static bool ggml_metal_encode_node(
                 float attn_factor;
                 float beta_fast;
                 float beta_slow;
+                ggml_metal_kargs_rope_mrope_sections mrope_sections;
 
                 memcpy(&freq_base,   (const int32_t *) dst->op_params +  5, sizeof(float));
                 memcpy(&freq_scale,  (const int32_t *) dst->op_params +  6, sizeof(float));
@@ -3740,8 +3732,11 @@ static bool ggml_metal_encode_node(
                 memcpy(&attn_factor, (const int32_t *) dst->op_params +  8, sizeof(float));
                 memcpy(&beta_fast,   (const int32_t *) dst->op_params +  9, sizeof(float));
                 memcpy(&beta_slow,   (const int32_t *) dst->op_params + 10, sizeof(float));
+                memcpy(&mrope_sections.v, (const int32_t *) dst->op_params + 11, sizeof(int)*4);
 
                 const bool is_neox = mode & GGML_ROPE_TYPE_NEOX;
+                const bool is_mrope = mode & GGML_ROPE_TYPE_MROPE;  // ggml_rope_multi, multimodal rotary position embedding
+                const bool is_vision = mode == GGML_ROPE_TYPE_VISION;
 
                 id<MTLComputePipelineState> pipeline = nil;
 
@@ -3785,6 +3780,9 @@ static bool ggml_metal_encode_node(
                     /*.attn_factor =*/ attn_factor,
                     /*.beta_fast   =*/ beta_fast,
                     /*.beta_slow   =*/ beta_slow,
+                    /*.is_mrope    =*/ is_mrope,
+                    /*.is_vision   =*/ is_vision,
+                    /*.mrope_sections =*/ mrope_sections,
                 };
 
                 [encoder setComputePipelineState:pipeline];
@@ -3804,7 +3802,6 @@ static bool ggml_metal_encode_node(
             {
                 GGML_ASSERT(ggml_is_contiguous(src0));
                 GGML_ASSERT(ggml_is_contiguous(src1));
-                GGML_ASSERT(src0->type == GGML_TYPE_F16);
                 GGML_ASSERT(src1->type == GGML_TYPE_F32);
                 GGML_ASSERT( dst->type == GGML_TYPE_F16 || dst->type == GGML_TYPE_F32);
 
diff --git a/ggml/src/ggml-metal/ggml-metal.metal b/ggml/src/ggml-metal/ggml-metal.metal
index 9f4147e9..0c94db49 100644
--- a/ggml/src/ggml-metal/ggml-metal.metal
+++ b/ggml/src/ggml-metal/ggml-metal.metal
@@ -2626,37 +2626,98 @@ kernel void kernel_rope_norm(
 
     device const int32_t * pos = (device const int32_t *) src1;
 
-    const float theta_base = (float) pos[i2];
     const float inv_ndims = -1.f/args.n_dims;
 
     float cos_theta;
     float sin_theta;
 
-    for (int i0 = 2*tiitg; i0 < args.ne0; i0 += 2*tptg.x) {
-        if (i0 < args.n_dims) {
-            const int ic = i0/2;
+    const ggml_metal_kargs_rope_mrope_sections sections = args.mrope_sections;
+    const int sect_dims = sections.v[0] + sections.v[1] + sections.v[2] + sections.v[3];
+    const int sec_w = sections.v[1] + sections.v[0];
+
+    float theta = 0.0f;
+    for (int i0 = 2 * tiitg; i0 < args.ne0; i0 += 2 * tptg.x) {
+        const int   ic          = i0 / 2;
+        const int   sector      = ic % sect_dims;
+        const float freq_factor = src2 != src0 ? ((const device float *) src2)[ic] : 1.0f;
+
+        if (!args.is_vision) {
+            if (i0 >= args.n_dims) {
+                const device T * const src =
+                    (device T *) (src0 + i3 * args.nb03 + i2 * args.nb02 + i1 * args.nb01 + i0 * args.nb00);
+                device T * dst_data =
+                    (device T *) (dst + i3 * args.nb3 + i2 * args.nb2 + i1 * args.nb1 + i0 * args.nb0);
+
+                dst_data[0] = src[0];
+                dst_data[1] = src[1];
+                continue;
+            }
 
-            const float theta = theta_base * pow(args.freq_base, inv_ndims*i0);
+            if (!args.is_mrope) {
+                theta = ((float) pos[i2]) * pow(args.freq_base, inv_ndims * i0);
 
-            const float freq_factor = src2 != src0 ? ((device const float *) src2)[ic] : 1.0f;
+                rope_yarn(theta / freq_factor, args.freq_scale, corr_dims, i0, args.ext_factor, args.attn_factor,
+                          &cos_theta, &sin_theta);
 
-            rope_yarn(theta/freq_factor, args.freq_scale, corr_dims, i0, args.ext_factor, args.attn_factor, &cos_theta, &sin_theta);
+                const device T * const src =
+                    (device T *) (src0 + i3 * args.nb03 + i2 * args.nb02 + i1 * args.nb01 + i0 * args.nb00);
+                device T * dst_data =
+                    (device T *) (dst + i3 * args.nb3 + i2 * args.nb2 + i1 * args.nb1 + i0 * args.nb0);
 
-            device const T * const src = (device T *)(src0 + i3*args.nb03 + i2*args.nb02 + i1*args.nb01 + i0*args.nb00);
-            device       T * dst_data  = (device T *)( dst + i3*args.nb3  + i2*args.nb2  + i1*args.nb1  + i0*args.nb0);
+                const float x0 = src[0];
+                const float x1 = src[1];
+
+                dst_data[0] = x0 * cos_theta - x1 * sin_theta;
+                dst_data[1] = x0 * sin_theta + x1 * cos_theta;
+                continue;
+            }
+
+            if (sector < sections.v[0]) {
+                theta = ((float) pos[i2]) * pow(args.freq_base, inv_ndims * i0);
+            } else if (sector >= sections.v[0] && sector < sec_w) {
+                theta = ((float) pos[i2 + args.ne02]) * pow(args.freq_base, inv_ndims * i0);
+            } else if (sector >= sec_w && sector < sec_w + sections.v[2]) {
+                theta = ((float) pos[i2 + args.ne02 * 2]) * pow(args.freq_base, inv_ndims * i0);
+            } else if (sector >= sec_w + sections.v[2]) {
+                theta = ((float) pos[i2 + args.ne02 * 3]) * pow(args.freq_base, inv_ndims * i0);
+            }
+
+            rope_yarn(theta / freq_factor, args.freq_scale, corr_dims, i0, args.ext_factor, args.attn_factor,
+                      &cos_theta, &sin_theta);
+
+            const device T * const src =
+                (device T *) (src0 + i3 * args.nb03 + i2 * args.nb02 + i1 * args.nb01 + i0 / 2 * args.nb00);
+            device T * dst_data =
+                (device T *) (dst + i3 * args.nb3 + i2 * args.nb2 + i1 * args.nb1 + i0 / 2 * args.nb0);
 
             const float x0 = src[0];
-            const float x1 = src[1];
+            const float x1 = src[args.n_dims / 2];
 
-            dst_data[0] = x0*cos_theta - x1*sin_theta;
-            dst_data[1] = x0*sin_theta + x1*cos_theta;
-        } else {
-            device const T * const src = (device T *)(src0 + i3*args.nb03 + i2*args.nb02 + i1*args.nb01 + i0*args.nb00);
-            device       T * dst_data  = (device T *)( dst + i3*args.nb3  + i2*args.nb2  + i1*args.nb1  + i0*args.nb0);
+            dst_data[0]               = x0 * cos_theta - x1 * sin_theta;
+            dst_data[args.n_dims / 2] = x0 * sin_theta + x1 * cos_theta;
+            continue;
+        }
 
-            dst_data[0] = src[0];
-            dst_data[1] = src[1];
+        if (sector < sections.v[0]) {
+            const int p = sector;
+            theta       = ((float) pos[i2]) * pow(args.freq_base, inv_ndims * 2 * p);
+        } else if (sector >= sections.v[0] && sector < sec_w) {
+            const int p = sector - sections.v[0];
+            theta       = ((float) pos[i2 + args.ne02]) * pow(args.freq_base, inv_ndims * 2 * p);
         }
+
+        rope_yarn(theta / freq_factor, args.freq_scale, corr_dims, i0, args.ext_factor, args.attn_factor, &cos_theta,
+                  &sin_theta);
+
+        const device T * const src =
+            (device T *) (src0 + i3 * args.nb03 + i2 * args.nb02 + i1 * args.nb01 + i0 / 2 * args.nb00);
+        device T * dst_data = (device T *) (dst + i3 * args.nb3 + i2 * args.nb2 + i1 * args.nb1 + i0 / 2 * args.nb0);
+
+        const float x0 = src[0];
+        const float x1 = src[args.n_dims];
+
+        dst_data[0]           = x0 * cos_theta - x1 * sin_theta;
+        dst_data[args.n_dims] = x0 * sin_theta + x1 * cos_theta;
     }
 }
 
diff --git a/ggml/src/ggml-opencl/ggml-opencl.cpp b/ggml/src/ggml-opencl/ggml-opencl.cpp
index 05a2f4e6..cb7cd406 100644
--- a/ggml/src/ggml-opencl/ggml-opencl.cpp
+++ b/ggml/src/ggml-opencl/ggml-opencl.cpp
@@ -4616,10 +4616,6 @@ static void ggml_cl_rope(ggml_backend_t backend, const ggml_tensor * src0, const
     const bool is_mrope = mode & GGML_ROPE_TYPE_MROPE;
     const bool is_vision = mode == GGML_ROPE_TYPE_VISION;
 
-    if (is_mrope) {
-        GGML_ASSERT(sections[0] > 0 || sections[1] > 0 || sections[2] > 0);
-    }
-
     if (is_vision) {
         GGML_ASSERT(n_dims == ne00/2);
     }
