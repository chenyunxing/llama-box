diff --git a/examples/llava/clip.cpp b/examples/llava/clip.cpp
index a1f050e3..2f976710 100644
--- a/examples/llava/clip.cpp
+++ b/examples/llava/clip.cpp
@@ -27,17 +27,7 @@
 #include <cinttypes>
 #include <limits>
 
-#if defined(LLAVA_LOG_OFF)
-#   define LOG_INF(...)
-#   define LOG_WRN(...)
-#   define LOG_ERR(...)
-#   define LOG_DBG(...)
-#else // defined(LLAVA_LOG_OFF)
-#   define LOG_INF(...) do { fprintf(stdout, __VA_ARGS__); } while (0)
-#   define LOG_WRN(...) do { fprintf(stderr, __VA_ARGS__); } while (0)
-#   define LOG_ERR(...) do { fprintf(stderr, __VA_ARGS__); } while (0)
-#   define LOG_DBG(...) do { fprintf(stdout, __VA_ARGS__); } while (0)
-#endif // defined(LLAVA_LOG_OFF)
+#include "common/log.h"
 
 //#define CLIP_DEBUG_FUNCTIONS
 
@@ -1372,6 +1362,7 @@ static ggml_cgraph * clip_image_build_graph(clip_ctx * ctx, const clip_image_f32
 // read and create ggml_context containing the tensors and their data
 struct clip_ctx * clip_model_load(const char * fname, const int verbosity = 1) {
     return clip_init(fname, clip_context_params{
+        /* max_image_size */ 0,
         /* use_gpu */   true,
         /* verbosity */ verbosity,
     });
@@ -1409,7 +1400,6 @@ struct clip_ctx * clip_init(const char * fname, struct clip_context_params ctx_p
         LOG_INF("%s: n_tensors:    %d\n", __func__, n_tensors);
         LOG_INF("%s: n_kv:         %d\n", __func__, n_kv);
         LOG_INF("%s: ftype:        %s\n", __func__, ftype_str.c_str());
-        LOG_INF("\n");
     }
     const int n_tensors = gguf_get_n_tensors(ctx);
 
@@ -1465,7 +1455,7 @@ struct clip_ctx * clip_init(const char * fname, struct clip_context_params ctx_p
             struct ggml_tensor * cur = ggml_get_tensor(meta, name);
             size_t tensor_size = ggml_nbytes(cur);
             model_size += tensor_size;
-            if (verbosity >= 3) {
+            if (verbosity >= 5) {
                 LOG_INF("%s: tensor[%d]: n_dims = %d, name = %s, tensor_size=%zu, offset=%zu, shape:[%" PRIu64 ", %" PRIu64 ", %" PRIu64 ", %" PRIu64 "], type = %s\n",
                        __func__, i, ggml_n_dims(cur), cur->name, tensor_size, offset, cur->ne[0], cur->ne[1], cur->ne[2], cur->ne[3], ggml_type_name(type));
             }
@@ -1522,6 +1512,13 @@ struct clip_ctx * clip_init(const char * fname, struct clip_context_params ctx_p
         idx = gguf_find_key(ctx, KEY_HAS_QWEN2VL_MERGER);
         if (idx != -1) {
             new_clip->has_qwen2vl_merger = gguf_get_val_bool(ctx, idx);
+#if (!defined GGML_USE_CUDA) && (!defined GGML_USE_METAL)
+            if (!ggml_backend_is_cpu(new_clip->backend)) {
+                ggml_backend_free(new_clip->backend);
+                new_clip->backend = ggml_backend_cpu_init();
+                LOG_WRN("%s: Qwen2VL merger is not supported on current backend, fallback to CPU backend\n", __func__);
+            }
+#endif
         }
         // GGML_ASSERT(new_clip->has_llava_projector); // see monatis/clip.cpp for image and/or text encoding for semantic search
 
@@ -1546,6 +1543,7 @@ struct clip_ctx * clip_init(const char * fname, struct clip_context_params ctx_p
             LOG_INF("%s: text_encoder:   %d\n", __func__, new_clip->has_text_encoder);
             LOG_INF("%s: vision_encoder: %d\n", __func__, new_clip->has_vision_encoder);
             LOG_INF("%s: llava_projector:  %d\n", __func__, new_clip->has_llava_projector);
+            LOG_INF("%s: qwen2vl_merger:  %d\n", __func__, new_clip->has_qwen2vl_merger);
             LOG_INF("%s: minicpmv_projector:  %d\n", __func__, new_clip->has_minicpmv_projector);
             LOG_INF("%s: minicpmv_version:  %d\n", __func__, new_clip->minicpmv_version);
             LOG_INF("%s: glm_projector:  %d\n", __func__, new_clip->has_glm_projector);
@@ -1685,7 +1683,7 @@ struct clip_ctx * clip_init(const char * fname, struct clip_context_params ctx_p
         new_clip->max_feature_layer = get_deepest_feature_layer(new_clip);
 
         if (verbosity >= 2) {
-            LOG_INF("\n%s: vision model hparams\n", __func__);
+            LOG_INF("%s: vision model hparams\n", __func__);
             LOG_INF("image_size         %d\n", hparams.image_size);
             LOG_INF("patch_size         %d\n", hparams.patch_size);
             LOG_INF("v_hidden_size      %d\n", hparams.hidden_size);
@@ -1904,7 +1902,29 @@ struct clip_ctx * clip_init(const char * fname, struct clip_context_params ctx_p
         clip_image_f32_batch batch;
         batch.size = 1;
         batch.data = nullptr;
-        ggml_cgraph * gf = clip_image_build_graph(new_clip, &batch, nullptr, false);
+        ggml_cgraph * gf;
+        if (ctx_params.max_image_size > 0) {
+            clip_image_u8 * img = new clip_image_u8();
+            img->nx = ctx_params.max_image_size;
+            img->ny = ctx_params.max_image_size;
+            img->buf.resize(3 * ctx_params.max_image_size * ctx_params.max_image_size);
+            bool processed = clip_image_preprocess(new_clip, img, &batch);
+            clip_image_u8_free(img);
+            if (!processed) {
+                LOG_ERR("%s: unable to preprocess image\n", __func__);
+                delete[] batch.data;
+                clip_free(new_clip);
+                return nullptr;
+            }
+            batch.size = 1;
+            struct clip_image_size * load_image_size = clip_image_size_init();
+            load_image_size->width = batch.data[0].nx;
+            load_image_size->height = batch.data[0].ny;
+            gf = clip_image_build_graph(new_clip, &batch, load_image_size, true);
+            delete[] batch.data;
+        } else {
+            gf = clip_image_build_graph(new_clip, &batch, nullptr, false);
+        }
         ggml_backend_sched_reserve(new_clip->sched.get(), gf);
         for (size_t i = 0; i < new_clip->backend_ptrs.size(); ++i) {
             ggml_backend_t backend = new_clip->backend_ptrs[i];
@@ -2290,7 +2310,7 @@ static std::vector<std::vector<clip_image_u8 *>> uhd_slice_image(const clip_imag
     const int multiple = fmin(ceil(ratio), max_slice_nums);
 
     std::vector<std::vector<clip_image_u8 *>> images;
-    LOG_INF("%s: multiple %d\n", __func__, multiple);
+    LOG_INFV(4, "%s: multiple %d\n", __func__, multiple);
     images.push_back(std::vector<clip_image_u8 *>());
 
     if (multiple <= 1) {
@@ -2305,17 +2325,17 @@ static std::vector<std::vector<clip_image_u8 *>> uhd_slice_image(const clip_imag
         clip_image_u8 * source_image = clip_image_u8_init();
         bicubic_resize(*img, *source_image, best_size.first, best_size.second);
         // source_image = image.copy().resize(best_resize, Image.Resampling.BICUBIC)
-        LOG_INF("%s: image_size: %d %d; source_image size: %d %d\n", __func__, img->nx, img->ny, best_size.first, best_size.second);
+        LOG_INFV(4, "%s: image_size: %d %d; source_image size: %d %d\n", __func__, img->nx, img->ny, best_size.first, best_size.second);
         images[images.size()-1].push_back(source_image);
 
         std::pair<int, int> best_grid = uhd_best_grid(max_slice_nums, multiple, log_ratio);
-        LOG_INF("%s: image_size: %d %d; best_grid: %d %d\n", __func__, img->nx, img->ny, best_grid.first, best_grid.second);
+        LOG_INFV(4, "%s: image_size: %d %d; best_grid: %d %d\n", __func__, img->nx, img->ny, best_grid.first, best_grid.second);
 
         auto refine_size = uhd_get_refine_size(original_size, best_grid, scale_resolution, patch_size, true);
         clip_image_u8 * refine_image = clip_image_u8_init();
         bicubic_resize(*img, *refine_image, refine_size.first, refine_size.second);
 
-        LOG_INF("%s: refine_image_size: %d %d; refine_size: %d %d\n", __func__, refine_image->nx, refine_image->ny, refine_size.first, refine_size.second);
+        LOG_INFV(4, "%s: refine_image_size: %d %d; refine_size: %d %d\n", __func__, refine_image->nx, refine_image->ny, refine_size.first, refine_size.second);
 
         // split_to_patches
         int width = refine_image->nx;
@@ -2373,7 +2393,7 @@ bool clip_image_preprocess(struct clip_ctx * ctx, const clip_image_u8 * img, cli
         int idx = 0;
         for (size_t i = 0; i < imgs.size(); ++i) {
             for (size_t j = 0; j < imgs[i].size(); ++j) {
-                LOG_DBG("%s: %d %d\n", __func__,imgs[i][j]->nx,imgs[i][j]->ny);
+                LOG_DBGV(6, "%s: %d %d\n", __func__,imgs[i][j]->nx,imgs[i][j]->ny);
                 clip_image_f32 * res = clip_image_f32_init();
                 normalize_image_u8_to_f32(imgs[i][j], res, ctx->image_mean, ctx->image_std);
                 res_imgs->data[idx++] = *res;
@@ -2398,6 +2418,7 @@ bool clip_image_preprocess(struct clip_ctx * ctx, const clip_image_u8 * img, cli
 
         res_imgs->data = new clip_image_f32[1];
         // clip_image_f32 * res = clip_image_f32_init();
+        LOG_DBGV(6, "%s: %d %d\n", __func__, resized->nx, resized->ny);
         normalize_image_u8_to_f32(resized, res_imgs->data, ctx->image_mean, ctx->image_std);
         // res_imgs->data[0] = *res;
         res_imgs->size = 1;
@@ -2488,13 +2509,14 @@ bool clip_image_preprocess(struct clip_ctx * ctx, const clip_image_u8 * img, cli
 
             clip_image_u8 *image_original_resize = clip_image_u8_init();
             // bilinear_resize(*img, *image_original_resize, params.image_size, params.image_size); // in python this is "shortest_edge", but all CLIP are square
-            bicubic_resize(*img, *image_original_resize, params.image_size, params.image_size); // in python this is "shortest_edge", but all CLIP are square
+            resize_and_pad_image(*img, *image_original_resize, {params.image_size, params.image_size});
             patches.insert(patches.begin(), image_original_resize);
             // clip_image_f32_batch_init(patches.size());
             res_imgs->size = patches.size();
             res_imgs->data = new clip_image_f32[res_imgs->size];
             int num=0;
             for (auto& patch : patches) {
+                LOG_DBGV(6, "%s: %d %d\n", __func__, patch->nx, patch->ny);
                 normalize_image_u8_to_f32(patch, &res_imgs->data[num], ctx->image_mean, ctx->image_std);
                 num++;
             }
@@ -2530,49 +2552,9 @@ bool clip_image_preprocess(struct clip_ctx * ctx, const clip_image_u8 * img, cli
 
     const int nx3 = int(nx / scale + 0.5f);
     const int ny3 = int(ny / scale + 0.5f);
-
-    const auto & m3 = ctx->image_mean; // {0.48145466f, 0.4578275f, 0.40821073f};
-    const auto & s3 = ctx->image_std;  // {0.26862954f, 0.26130258f, 0.27577711f};
-
-    for (int y = 0; y < ny3; y++) {
-        for (int x = 0; x < nx3; x++) {
-            for (int c = 0; c < 3; c++) {
-                // linear interpolation
-                const float sx = (x + 0.5f) * scale - 0.5f;
-                const float sy = (y + 0.5f) * scale - 0.5f;
-
-                const int x0 = std::max(0, (int)std::floor(sx));
-                const int y0 = std::max(0, (int)std::floor(sy));
-
-                const int x1 = std::min(x0 + 1, nx - 1);
-                const int y1 = std::min(y0 + 1, ny - 1);
-
-                const float dx = sx - x0;
-                const float dy = sy - y0;
-
-                const int j00 = 3 * (y0 * nx + x0) + c;
-                const int j01 = 3 * (y0 * nx + x1) + c;
-                const int j10 = 3 * (y1 * nx + x0) + c;
-                const int j11 = 3 * (y1 * nx + x1) + c;
-
-                const float v00 = temp->buf[j00];
-                const float v01 = temp->buf[j01];
-                const float v10 = temp->buf[j10];
-                const float v11 = temp->buf[j11];
-
-                const float v0 = v00 * (1.0f - dx) + v01 * dx;
-                const float v1 = v10 * (1.0f - dx) + v11 * dx;
-
-                const float v = v0 * (1.0f - dy) + v1 * dy;
-
-                const uint8_t v2 = std::min(std::max(std::round(v), 0.0f), 255.0f);
-
-                const int i = 3 * (y * nx3 + x) + c;
-
-                res->buf[i] = ((float(v2) / 255.0f) - m3[c]) / s3[c];
-            }
-        }
-    }
+    resize_and_pad_image(*img, *temp, {nx3, ny3});
+    LOG_DBGV(6, "%s: %d %d\n", __func__, temp->nx, temp->ny);
+    normalize_image_u8_to_f32(temp, res, ctx->image_mean, ctx->image_std);
     clip_image_u8_free(temp);
 
     // {
diff --git a/examples/llava/clip.h b/examples/llava/clip.h
index 47059ca1..b9ba8a36 100644
--- a/examples/llava/clip.h
+++ b/examples/llava/clip.h
@@ -40,6 +40,7 @@ struct clip_image_f32_batch {
 };
 
 struct clip_context_params {
+    int32_t max_image_size;
     bool use_gpu;
     int verbosity;
 };
diff --git a/examples/llava/llava.cpp b/examples/llava/llava.cpp
index 518aad3f..b699b8d0 100644
--- a/examples/llava/llava.cpp
+++ b/examples/llava/llava.cpp
@@ -11,17 +11,7 @@
 #include <limits>
 #include <vector>
 
-#if defined(LLAVA_LOG_OFF)
-#   define LOG_INF(...)
-#   define LOG_WRN(...)
-#   define LOG_ERR(...)
-#   define LOG_DBG(...)
-#else // defined(LLAVA_LOG_OFF)
-#   define LOG_INF(...) do { fprintf(stdout, __VA_ARGS__); } while (0)
-#   define LOG_WRN(...) do { fprintf(stderr, __VA_ARGS__); } while (0)
-#   define LOG_ERR(...) do { fprintf(stderr, __VA_ARGS__); } while (0)
-#   define LOG_DBG(...) do { fprintf(stdout, __VA_ARGS__); } while (0)
-#endif // defined(LLAVA_LOG_OFF)
+#include "common/log.h"
 
 // RGB uint8 image
 struct clip_image_u8 {
@@ -249,13 +239,16 @@ static bool encode_image_with_clip(clip_ctx * ctx_clip, int n_threads, const cli
     clip_image_f32_batch img_res_v;
     img_res_v.size = 0;
     img_res_v.data = nullptr;
+#define free_img_res_v \
+    delete[] img_res_v.data; \
+    img_res_v.size = 0; \
+    img_res_v.data = nullptr;
     if (!clip_image_preprocess(ctx_clip, img, &img_res_v)) {
         LOG_ERR("%s: unable to preprocess image\n", __func__);
-        delete[] img_res_v.data;
+        free_img_res_v;
         return false;
     }
 
-    const int64_t t_img_enc_start_us = ggml_time_us();
 
     const char * mm_patch_merge_type = clip_patch_merge_type(ctx_clip);
 
@@ -282,13 +275,16 @@ static bool encode_image_with_clip(clip_ctx * ctx_clip, int n_threads, const cli
 
             if (!encoded) {
                 LOG_ERR("Unable to encode image - spatial_unpad - subimage %d of %d\n", (int) i+1, (int) img_res_v.size);
+                for (size_t j = 0; j <= i; j++) {
+                    free(image_embd_v[j]);
+                }
+                image_embd_v.clear();
+                free_img_res_v;
                 return false;
             }
             const int64_t t_img_enc_steop_batch_us = ggml_time_us();
             LOG_INF("%s: step %d of %d encoded in %8.2f ms\n", __func__, (int)i+1, (int)img_res_v.size, (t_img_enc_steop_batch_us - t_img_enc_step_start_us) / 1000.0);
         }
-        const int64_t t_img_enc_batch_us = ggml_time_us();
-        LOG_INF("%s: all %d segments encoded in %8.2f ms\n", __func__, (int)img_res_v.size, (t_img_enc_batch_us - t_img_enc_start_us) / 1000.0);
 
         int n_img_pos_out = 0;
         for (size_t i = 0; i < image_embd_v.size(); i++) {
@@ -299,19 +295,18 @@ static bool encode_image_with_clip(clip_ctx * ctx_clip, int n_threads, const cli
             n_img_pos_out += clip_n_patches_by_img(ctx_clip, &img_res_v.data[i]);
         }
         *n_img_pos = n_img_pos_out;
+        load_image_size->width = img->nx;
+        load_image_size->height = img->ny;
+        clip_add_load_image_size(ctx_clip, load_image_size);
         for (size_t i = 0; i < image_embd_v.size(); i++) {
             free(image_embd_v[i]);
         }
         image_embd_v.clear();
-        load_image_size->width = img->nx;
-        load_image_size->height = img->ny;
-        clip_add_load_image_size(ctx_clip, load_image_size);
-        LOG_INF("%s: load_image_size %d %d\n", __func__, load_image_size->width, load_image_size->height);
-        delete[] img_res_v.data;
-        img_res_v.size = 0;
-        img_res_v.data = nullptr;
+        free_img_res_v;
     }
     else if (clip_is_glm(ctx_clip)){
+        const int64_t t_img_enc_step_start_us = ggml_time_us();
+
         struct clip_image_size * load_image_size = clip_image_size_init();
         load_image_size->width = img_res_v.data[0].nx;
         load_image_size->height = img_res_v.data[0].ny;
@@ -320,12 +315,18 @@ static bool encode_image_with_clip(clip_ctx * ctx_clip, int n_threads, const cli
         bool encoded = clip_image_encode(ctx_clip, n_threads, &img_res_v.data[0], image_embd);
         int pos = int(load_image_size->width/clip_patch_size(ctx_clip)/2);
         *n_img_pos = (pos * pos + 2);
+        free_img_res_v;
         if (!encoded){
             LOG_ERR("Unable to encode image \n");
             return false;
         }
+
+        const int64_t t_img_enc_steop_batch_us = ggml_time_us();
+        LOG_INF("%s: step 1 of 1 encoded in %8.2f ms\n", __func__, (t_img_enc_steop_batch_us - t_img_enc_step_start_us) / 1000.0);
     }
     else if (strcmp(mm_patch_merge_type, "spatial_unpad") != 0) {
+        const int64_t t_img_enc_step_start_us = ggml_time_us();
+
         // flat / default llava-1.5 type embedding
         *n_img_pos = clip_n_patches(ctx_clip);
         bool encoded = clip_image_encode(ctx_clip, n_threads, &img_res_v.data[0], image_embd); // image_embd shape is 576 x 4096
@@ -335,22 +336,34 @@ static bool encode_image_with_clip(clip_ctx * ctx_clip, int n_threads, const cli
 
             return false;
         }
+
+        const int64_t t_img_enc_steop_batch_us = ggml_time_us();
+        LOG_INF("%s: step 1 of 1 encoded in %8.2f ms\n", __func__, (t_img_enc_steop_batch_us - t_img_enc_step_start_us) / 1000.0);
     }
     else {
         // spatial_unpad llava-1.6 type embedding
         // TODO: CLIP needs batching support - in HF the llm projection is separate after encoding, which might be a solution to quickly get batching working
         std::vector<float *> image_embd_v;
         image_embd_v.resize(img_res_v.size);
-        for (size_t i = 0; i < img_res_v.size; i++) {
+        bool ok = true;
+        for (size_t i = 0; ok && i < img_res_v.size; i++) {
+            const int64_t t_img_enc_step_start_us = ggml_time_us();
+
             image_embd_v[i] = (float *)malloc(clip_embd_nbytes(ctx_clip)); // 576 patches * 4096 embeddings * 4 bytes = 9437184
             const bool encoded = clip_image_encode(ctx_clip, n_threads, &img_res_v.data[i], image_embd_v[i]); // image data is in 3x336x336 format and will be converted to 336x336x3 inside
             if (!encoded) {
                 LOG_ERR("Unable to encode image - spatial_unpad - subimage %d of %d\n", (int) i+1, (int) img_res_v.size);
+                for (size_t j = 0; j <= i; j++) {
+                    free(image_embd_v[j]);
+                }
+                image_embd_v.clear();
+                free_img_res_v;
                 return false;
             }
+
+            const int64_t t_img_enc_steop_batch_us = ggml_time_us();
+            LOG_INF("%s: step %d of %d encoded in %8.2f ms\n", __func__, (int)i+1, (int)img_res_v.size, (t_img_enc_steop_batch_us - t_img_enc_step_start_us) / 1000.0);
         }
-        const int64_t t_img_enc_batch_us = ggml_time_us();
-        LOG_INF("%s: %d segments encoded in %8.2f ms\n", __func__, (int)img_res_v.size, (t_img_enc_batch_us - t_img_enc_start_us) / 1000.0);
 
         const int32_t * image_grid = clip_image_grid(ctx_clip);
         const size_t num_gridpoints = get_clip_image_grid_size(ctx_clip);
@@ -360,11 +373,6 @@ static bool encode_image_with_clip(clip_ctx * ctx_clip, int n_threads, const cli
             grid_pinpoints.push_back({image_grid[i], image_grid[i+1]});
         }
 
-        // free all img_res_v - not needed anymore
-        delete[] img_res_v.data;
-        img_res_v.size = 0;
-        img_res_v.data = nullptr;
-
         const int32_t image_size = clip_image_size(ctx_clip);
 
         struct clip_image_grid_shape grid_shape = get_anyres_image_grid_shape({img->nx,img->ny}, grid_pinpoints, image_size);
@@ -377,6 +385,7 @@ static bool encode_image_with_clip(clip_ctx * ctx_clip, int n_threads, const cli
             free(image_embd_v[i]);
         }
         image_embd_v.clear();
+        free_img_res_v;
 
         // debug image/segment/normalization content:
         // clip_image_u8 * tmp = clip_image_u8_init();
@@ -386,11 +395,6 @@ static bool encode_image_with_clip(clip_ctx * ctx_clip, int n_threads, const cli
 
     LOG_INF("%s: image embedding created: %d tokens\n", __func__, *n_img_pos);
 
-    const int64_t t_img_enc_end_us = ggml_time_us();
-    float t_img_enc_ms = (t_img_enc_end_us - t_img_enc_start_us) / 1000.0;
-
-    LOG_INF("\n%s: image encoded in %8.2f ms by CLIP (%8.2f ms per image patch)\n", __func__, t_img_enc_ms, t_img_enc_ms / *n_img_pos);
-
     return true;
 }
 
@@ -514,6 +518,30 @@ struct llava_image_embed * llava_image_embed_make_with_bytes(struct clip_ctx * c
     return result;
 }
 
+struct llava_image_embed * llava_image_embed_make_with_data(struct clip_ctx * ctx_clip, int n_threads, const unsigned char * data, int nx, int ny, int nc) {
+    clip_image_u8 * img = clip_image_u8_init();
+    img->nx = nx;
+    img->ny = ny;
+    img->buf.resize(nx * ny * nc);
+    LOG_INFV(4, "%s: image size: %.2fKiB, nx: %d, ny: %d, nc: %d\n", __func__, float(img->buf.size())/1024, nx, ny, nc);
+    memcpy(img->buf.data(), data, img->buf.size());
+
+    float* image_embed = NULL;
+    int n_image_pos = 0;
+    bool image_embed_result = llava_image_embed_make_with_clip_img(ctx_clip, n_threads, img, &image_embed, &n_image_pos);
+    if (!image_embed_result) {
+        clip_image_u8_free(img);
+        LOG_ERR("%s: couldn't embed the image\n", __func__);
+        return NULL;
+    }
+
+    clip_image_u8_free(img);
+    auto *result = (llava_image_embed*)malloc(sizeof(llava_image_embed));
+    result->embed = image_embed;
+    result->n_image_pos = n_image_pos;
+    return result;
+}
+
 static bool load_file_to_bytes(const char* path, unsigned char** bytesOut, long *sizeOut) {
     auto file = fopen(path, "rb");
     if (file == NULL) {
diff --git a/examples/llava/llava.h b/examples/llava/llava.h
index b6feb302..7b29b7a0 100644
--- a/examples/llava/llava.h
+++ b/examples/llava/llava.h
@@ -34,6 +34,8 @@ LLAVA_API bool llava_image_embed_make_with_clip_img(struct clip_ctx * ctx_clip,
 
 /** build an image embed from image file bytes */
 LLAVA_API struct llava_image_embed * llava_image_embed_make_with_bytes(struct clip_ctx * ctx_clip, int n_threads, const unsigned char * image_bytes, int image_bytes_length);
+/** build an image embed from image data */
+LLAVA_API struct llava_image_embed * llava_image_embed_make_with_data(struct clip_ctx * ctx_clip, int n_threads, const unsigned char * data, int nx, int ny, int nc);
 /** build an image embed from a path to an image filename */
 LLAVA_API struct llava_image_embed * llava_image_embed_make_with_filename(struct clip_ctx * ctx_clip, int n_threads, const char * image_path);
 /** free an embedding made with llava_image_embed_make_* */
