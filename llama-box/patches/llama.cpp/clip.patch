diff --git a/tools/mtmd/clip-impl.h b/tools/mtmd/clip-impl.h
index 27ce8c43..ac733097 100644
--- a/tools/mtmd/clip-impl.h
+++ b/tools/mtmd/clip-impl.h
@@ -224,17 +224,7 @@ static void clip_log_internal(enum ggml_log_level level, const char * format, ..
     va_end(args);
 }
 
-#define LOG_TMPL(level, ...) \
-    do { \
-        if ((level) >= g_logger_state.verbosity_thold) { \
-            clip_log_internal((level), __VA_ARGS__); \
-        } \
-    } while (0)
-#define LOG_INF(...) LOG_TMPL(GGML_LOG_LEVEL_INFO,  __VA_ARGS__)
-#define LOG_WRN(...) LOG_TMPL(GGML_LOG_LEVEL_WARN,  __VA_ARGS__)
-#define LOG_ERR(...) LOG_TMPL(GGML_LOG_LEVEL_ERROR, __VA_ARGS__)
-#define LOG_DBG(...) LOG_TMPL(GGML_LOG_LEVEL_DEBUG, __VA_ARGS__)
-#define LOG_CNT(...) LOG_TMPL(GGML_LOG_LEVEL_CONT,  __VA_ARGS__)
+#include "log.h"
 
 //
 // cpp wrappers
@@ -290,37 +280,7 @@ struct clip_image_f32_batch {
 // common utils
 //
 
-static std::string string_format(const char * fmt, ...) {
-    va_list ap;
-    va_list ap2;
-    va_start(ap, fmt);
-    va_copy(ap2, ap);
-    int size = vsnprintf(NULL, 0, fmt, ap);
-    GGML_ASSERT(size >= 0 && size < INT_MAX); // NOLINT
-    std::vector<char> buf(size + 1);
-    int size2 = vsnprintf(buf.data(), size + 1, fmt, ap2);
-    GGML_ASSERT(size2 == size);
-    va_end(ap2);
-    va_end(ap);
-    return std::string(buf.data(), buf.size());
-}
-
-static void string_replace_all(std::string & s, const std::string & search, const std::string & replace) {
-    if (search.empty()) {
-        return;
-    }
-    std::string builder;
-    builder.reserve(s.length());
-    size_t pos = 0;
-    size_t last_pos = 0;
-    while ((pos = s.find(search, last_pos)) != std::string::npos) {
-        builder.append(s, last_pos, pos - last_pos);
-        builder.append(replace);
-        last_pos = pos + search.length();
-    }
-    builder.append(s, last_pos, std::string::npos);
-    s = std::move(builder);
-}
+#include "common.h"
 
 // split string by a `std::string delim` instead of `char delim`
 static std::vector<std::string> string_split_str(std::string s, const std::string & delimiter) {
diff --git a/tools/mtmd/clip.cpp b/tools/mtmd/clip.cpp
index 6205dad5..9bc72b54 100644
--- a/tools/mtmd/clip.cpp
+++ b/tools/mtmd/clip.cpp
@@ -170,7 +170,7 @@ struct clip_hparams {
     bool has_audio = false;
 
     int32_t image_size;
-    int32_t patch_size;
+    int32_t patch_size = 1;
     int32_t n_embd;
     int32_t n_ff;
     int32_t projection_dim;
@@ -377,6 +377,8 @@ struct clip_ctx {
     int max_nodes = 8192;
     ggml_backend_sched_ptr sched;
 
+    int max_image_size = 0;
+
     // for debugging
     bool debug_graph = false;
     std::vector<ggml_tensor *> debug_print_tensors;
@@ -390,6 +392,7 @@ struct clip_ctx {
         backend = ctx_params.use_gpu
                     ? ggml_backend_init_by_type(GGML_BACKEND_DEVICE_TYPE_GPU, nullptr)
                     : nullptr;
+        max_image_size = ctx_params.max_image_size;
 
         if (backend) {
             LOG_INF("%s: CLIP using %s backend\n", __func__, ggml_backend_name(backend));
@@ -2058,6 +2061,18 @@ struct clip_model_loader {
             if (ctx_clip.proj_type == PROJECTOR_TYPE_UNKNOWN) {
                 throw std::runtime_error(string_format("%s: unknown projector type: %s\n", __func__, proj_type.c_str()));
             }
+#if (!defined GGML_USE_CUDA) && (!defined GGML_USE_METAL)
+            if ((ctx_clip.proj_type == PROJECTOR_TYPE_QWEN2VL || ctx_clip.proj_type == PROJECTOR_TYPE_QWEN25VL) && !ggml_backend_is_cpu(ctx_clip.backend)) {
+                LOG_WRN("%s", "Qwen2VL/Qwen25VL merger is not supported on current backend, fallback to CPU backend\n");
+                ggml_backend_free(ctx_clip.backend);
+                ctx_clip.backend = ctx_clip.backend_cpu;
+                ctx_clip.backend_ptrs.erase(ctx_clip.backend_ptrs.begin());
+                ctx_clip.backend_buft.erase(ctx_clip.backend_buft.begin());
+                ctx_clip.sched.reset(
+                    ggml_backend_sched_new(ctx_clip.backend_ptrs.data(), ctx_clip.backend_buft.data(), ctx_clip.backend_ptrs.size(), 8192, false, true)
+                );
+            }
+#endif
         }
 
         // other hparams
@@ -2163,6 +2178,7 @@ struct clip_model_loader {
                     } break;
                 case PROJECTOR_TYPE_PIXTRAL:
                     {
+                        hparams.image_size = ctx_clip.max_image_size <= 0 ? hparams.image_size : ctx_clip.max_image_size;
                         hparams.rope_theta = 10000.0f;
                         hparams.warmup_image_size = hparams.patch_size * 8;
                         get_u32(KEY_SPATIAL_MERGE_SIZE, hparams.spatial_merge_size, false);
@@ -2181,7 +2197,7 @@ struct clip_model_loader {
                         // ref: https://huggingface.co/Qwen/Qwen2-VL-7B-Instruct/blob/main/preprocessor_config.json
                         // however, the model use unreasonable memory past 1024 size, we force it to 1024 otherwise it's unusable
                         // ref: https://huggingface.co/Qwen/Qwen2-VL-2B-Instruct/discussions/10
-                        hparams.image_size = 1024;
+                        hparams.image_size = ctx_clip.max_image_size <= 0 ? hparams.image_size : ctx_clip.max_image_size;
                         hparams.warmup_image_size = hparams.patch_size * 8;
                     } break;
                 case PROJECTOR_TYPE_QWEN25VL:
@@ -2190,7 +2206,7 @@ struct clip_model_loader {
                         // https://huggingface.co/Qwen/Qwen2.5-VL-7B-Instruct/blob/main/preprocessor_config.json
                         // however, the model use unreasonable memory past 1024 size, we force it to 1024 otherwise it's unusable
                         // ref: https://huggingface.co/Qwen/Qwen2-VL-2B-Instruct/discussions/10
-                        hparams.image_size = 1024;
+                        hparams.image_size = ctx_clip.max_image_size <= 0 ? hparams.image_size : ctx_clip.max_image_size;
                         hparams.warmup_image_size = hparams.patch_size * 8;
                         get_u32(KEY_WIN_ATTN_PATTERN, hparams.n_wa_pattern);
                     } break;
@@ -3275,7 +3291,7 @@ bool clip_image_preprocess(struct clip_ctx * ctx, const clip_image_u8 * img, str
         clip_image_u8 resized;
         auto patch_size = params.patch_size * 2;
         auto new_size = image_manipulation::calc_size_preserved_ratio(original_size, patch_size, params.image_size);
-        image_manipulation::bicubic_resize(*img, resized, new_size.width, new_size.height);
+        image_manipulation::bilinear_resize(*img, resized, new_size.width, new_size.height);
 
         clip_image_f32_ptr img_f32(clip_image_f32_init());
         // clip_image_f32_ptr res(clip_image_f32_init());
@@ -4025,6 +4041,30 @@ bool clip_is_gemma3(const struct clip_ctx * ctx) {
     return ctx->proj_type == PROJECTOR_TYPE_GEMMA3;
 }
 
+bool clip_is_smolvlm(const struct clip_ctx * ctx) {
+    return ctx->proj_type == PROJECTOR_TYPE_IDEFICS3;
+}
+
+bool clip_is_pixtral(const struct clip_ctx * ctx) {
+    return ctx->proj_type == PROJECTOR_TYPE_PIXTRAL;
+}
+
+bool clip_is_internvl(const struct clip_ctx * ctx) {
+    return ctx->proj_type == PROJECTOR_TYPE_INTERNVL;
+}
+
+bool clip_is_llama4(const struct clip_ctx * ctx) {
+    return ctx->proj_type == PROJECTOR_TYPE_LLAMA4;
+}
+
+bool clip_is_ultravox(const struct clip_ctx * ctx) {
+    return ctx->proj_type == PROJECTOR_TYPE_ULTRAVOX;
+}
+
+bool clip_is_qwen2a(const struct clip_ctx * ctx) {
+    return ctx->proj_type == PROJECTOR_TYPE_QWEN2A;
+}
+
 bool clip_has_vision_encoder(const struct clip_ctx * ctx) {
     return ctx->vision_model.hparams.has_vision;
 }
diff --git a/tools/mtmd/clip.h b/tools/mtmd/clip.h
index 5abfcd1a..9fff8867 100644
--- a/tools/mtmd/clip.h
+++ b/tools/mtmd/clip.h
@@ -20,6 +20,7 @@ struct clip_image_f32_batch;
 struct clip_context_params {
     bool use_gpu;
     enum ggml_log_level verbosity;
+    int max_image_size = 0;
 };
 
 struct clip_ctx * clip_init(const char * fname, struct clip_context_params ctx_params);
@@ -93,6 +94,12 @@ bool clip_is_glm(const struct clip_ctx * ctx);
 bool clip_is_qwen2vl(const struct clip_ctx * ctx);
 bool clip_is_llava(const struct clip_ctx * ctx);
 bool clip_is_gemma3(const struct clip_ctx * ctx);
+bool clip_is_smolvlm(const struct clip_ctx * ctx);
+bool clip_is_pixtral(const struct clip_ctx * ctx);
+bool clip_is_internvl(const struct clip_ctx * ctx);
+bool clip_is_llama4(const struct clip_ctx * ctx);
+bool clip_is_ultravox(const struct clip_ctx * ctx);
+bool clip_is_qwen2a(const struct clip_ctx * ctx);
 
 bool clip_encode_float_image (struct clip_ctx * ctx, int n_threads, float * img, int h, int w, float * vec);
 
