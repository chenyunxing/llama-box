diff --git a/tools/mtmd/clip-impl.h b/tools/mtmd/clip-impl.h
index 62c936ed..d80e5c76 100644
--- a/tools/mtmd/clip-impl.h
+++ b/tools/mtmd/clip-impl.h
@@ -226,6 +226,7 @@ static void clip_log_internal(enum ggml_log_level level, const char * format, ..
     va_end(args);
 }
 
+#ifndef LOG_TMPL
 #define LOG_TMPL(level, ...) \
     do { \
         if ((level) >= g_logger_state.verbosity_thold) { \
@@ -237,6 +238,7 @@ static void clip_log_internal(enum ggml_log_level level, const char * format, ..
 #define LOG_ERR(...) LOG_TMPL(GGML_LOG_LEVEL_ERROR, __VA_ARGS__)
 #define LOG_DBG(...) LOG_TMPL(GGML_LOG_LEVEL_DEBUG, __VA_ARGS__)
 #define LOG_CNT(...) LOG_TMPL(GGML_LOG_LEVEL_CONT,  __VA_ARGS__)
+#endif
 
 //
 // cpp wrappers
@@ -292,7 +294,7 @@ struct clip_image_f32_batch {
 // common utils
 //
 
-static std::string string_format(const char * fmt, ...) {
+inline std::string string_format(const char * fmt, ...) {
     va_list ap;
     va_list ap2;
     va_start(ap, fmt);
@@ -307,94 +309,18 @@ static std::string string_format(const char * fmt, ...) {
     return std::string(buf.data(), buf.size());
 }
 
-static void string_replace_all(std::string & s, const std::string & search, const std::string & replace) {
-    if (search.empty()) {
-        return;
-    }
-    std::string builder;
-    builder.reserve(s.length());
-    size_t pos = 0;
-    size_t last_pos = 0;
-    while ((pos = s.find(search, last_pos)) != std::string::npos) {
-        builder.append(s, last_pos, pos - last_pos);
-        builder.append(replace);
-        last_pos = pos + search.length();
-    }
-    builder.append(s, last_pos, std::string::npos);
-    s = std::move(builder);
-}
+inline void string_replace_all(std::string & s, const std::string & search, const std::string & replace);
 
 // split string by a `std::string delim` instead of `char delim`
-static std::vector<std::string> string_split_str(std::string s, const std::string & delimiter) {
-    std::vector<std::string> tokens;
-    size_t pos = 0;
-    std::string token;
-    while ((pos = s.find(delimiter)) != std::string::npos) {
-        token = s.substr(0, pos);
-        tokens.push_back(token);
-        s.erase(0, pos + delimiter.length());
-    }
-    tokens.push_back(s);
-    return tokens;
-}
+inline std::vector<std::string> string_split_str(std::string s, const std::string & delimiter);
 
 //
 // gguf utils
 //
 
-static std::string gguf_data_to_str(enum gguf_type type, const void * data, int i) {
-    switch (type) {
-        case GGUF_TYPE_UINT8:   return std::to_string(((const uint8_t  *)data)[i]);
-        case GGUF_TYPE_INT8:    return std::to_string(((const int8_t   *)data)[i]);
-        case GGUF_TYPE_UINT16:  return std::to_string(((const uint16_t *)data)[i]);
-        case GGUF_TYPE_INT16:   return std::to_string(((const int16_t  *)data)[i]);
-        case GGUF_TYPE_UINT32:  return std::to_string(((const uint32_t *)data)[i]);
-        case GGUF_TYPE_INT32:   return std::to_string(((const int32_t  *)data)[i]);
-        case GGUF_TYPE_UINT64:  return std::to_string(((const uint64_t *)data)[i]);
-        case GGUF_TYPE_INT64:   return std::to_string(((const int64_t  *)data)[i]);
-        case GGUF_TYPE_FLOAT32: return std::to_string(((const float    *)data)[i]);
-        case GGUF_TYPE_FLOAT64: return std::to_string(((const double   *)data)[i]);
-        case GGUF_TYPE_BOOL:    return ((const bool *)data)[i] ? "true" : "false";
-        default:                return string_format("unknown type %d", type);
-    }
-}
+inline std::string gguf_data_to_str(enum gguf_type type, const void * data, int i);
 
-static std::string gguf_kv_to_str(const struct gguf_context * ctx_gguf, int i) {
-    const enum gguf_type type = gguf_get_kv_type(ctx_gguf, i);
-
-    switch (type) {
-        case GGUF_TYPE_STRING:
-            return gguf_get_val_str(ctx_gguf, i);
-        case GGUF_TYPE_ARRAY:
-            {
-                const enum gguf_type arr_type = gguf_get_arr_type(ctx_gguf, i);
-                int arr_n = gguf_get_arr_n(ctx_gguf, i);
-                const void * data = arr_type == GGUF_TYPE_STRING ? nullptr : gguf_get_arr_data(ctx_gguf, i);
-                std::stringstream ss;
-                ss << "[";
-                for (int j = 0; j < arr_n; j++) {
-                    if (arr_type == GGUF_TYPE_STRING) {
-                        std::string val = gguf_get_arr_str(ctx_gguf, i, j);
-                        // escape quotes
-                        string_replace_all(val, "\\", "\\\\");
-                        string_replace_all(val, "\"", "\\\"");
-                        ss << '"' << val << '"';
-                    } else if (arr_type == GGUF_TYPE_ARRAY) {
-                        ss << "???";
-                    } else {
-                        ss << gguf_data_to_str(arr_type, data, j);
-                    }
-                    if (j < arr_n - 1) {
-                        ss << ", ";
-                    }
-                }
-                ss << "]";
-                return ss.str();
-            }
-        default:
-            return gguf_data_to_str(type, gguf_get_val_data(ctx_gguf, i), 0);
-    }
-}
+inline std::string gguf_kv_to_str(const struct gguf_context * ctx_gguf, int i);
 
 //
 // debugging
diff --git a/tools/mtmd/clip.cpp b/tools/mtmd/clip.cpp
index c25bacc1..5cad9e6a 100644
--- a/tools/mtmd/clip.cpp
+++ b/tools/mtmd/clip.cpp
@@ -30,6 +30,11 @@
 
 struct clip_logger_state g_logger_state = {GGML_LOG_LEVEL_CONT, clip_log_callback_default, NULL};
 
+void clip_log_set(ggml_log_callback log_callback, void * user_data) {
+    g_logger_state.log_callback = log_callback ? log_callback : clip_log_callback_default;
+    g_logger_state.log_callback_user_data = user_data;
+}
+
 enum ffn_op_type {
     FFN_GELU,
     FFN_GELU_ERF,
@@ -164,7 +169,7 @@ enum patch_merge_type {
 
 struct clip_hparams {
     int32_t image_size;
-    int32_t patch_size;
+    int32_t patch_size = 1;
     int32_t n_embd;
     int32_t n_ff;
     int32_t projection_dim;
@@ -2061,7 +2066,7 @@ struct clip_model_loader {
         }
     }
 
-    void load_hparams(clip_model & model, clip_modality modality) {
+    void load_hparams(clip_model & model, clip_modality modality, int32_t max_image_size = 0) {
         auto & hparams = model.hparams;
         std::string log_ffn_op; // for logging
 
@@ -2196,8 +2201,9 @@ struct clip_model_loader {
                     } break;
                 case PROJECTOR_TYPE_PIXTRAL:
                     {
+                        hparams.image_size = max_image_size <= 0 ? hparams.image_size : max_image_size;
                         hparams.rope_theta = 10000.0f;
-                        hparams.warmup_image_size = hparams.patch_size * 8;
+                        hparams.warmup_image_size = max_image_size <= 0 ? hparams.patch_size * 8 : max_image_size;
                         get_u32(KEY_SPATIAL_MERGE_SIZE, hparams.spatial_merge_size, false);
                     } break;
                 case PROJECTOR_TYPE_GEMMA3:
@@ -2214,8 +2220,8 @@ struct clip_model_loader {
                         // ref: https://huggingface.co/Qwen/Qwen2-VL-7B-Instruct/blob/main/preprocessor_config.json
                         // however, the model use unreasonable memory past 1024 size, we force it to 1024 otherwise it's unusable
                         // ref: https://huggingface.co/Qwen/Qwen2-VL-2B-Instruct/discussions/10
-                        hparams.image_size = 1024;
-                        hparams.warmup_image_size = hparams.patch_size * 8;
+                        hparams.image_size = max_image_size <= 0 ? 1024 : max_image_size;
+                        hparams.warmup_image_size = max_image_size <= 0 ? hparams.patch_size * 8 : max_image_size;
                     } break;
                 case PROJECTOR_TYPE_QWEN25VL:
                     {
@@ -2223,8 +2229,8 @@ struct clip_model_loader {
                         // https://huggingface.co/Qwen/Qwen2.5-VL-7B-Instruct/blob/main/preprocessor_config.json
                         // however, the model use unreasonable memory past 1024 size, we force it to 1024 otherwise it's unusable
                         // ref: https://huggingface.co/Qwen/Qwen2-VL-2B-Instruct/discussions/10
-                        hparams.image_size = 1024;
-                        hparams.warmup_image_size = hparams.patch_size * 8;
+                        hparams.image_size = max_image_size <= 0 ? 1024 : max_image_size;
+                        hparams.warmup_image_size = max_image_size <= 0 ? hparams.patch_size * 8 : max_image_size;
                         get_u32(KEY_WIN_ATTN_PATTERN, hparams.n_wa_pattern);
                     } break;
                 case PROJECTOR_TYPE_LLAMA4:
@@ -2289,6 +2295,19 @@ struct clip_model_loader {
         std::map<std::string, size_t> tensor_offset;
         std::vector<ggml_tensor *> tensors_to_load;
 
+#if (defined GGML_USE_CANN) || (defined GGML_USE_VULKAN)
+        if ((model.proj_type == PROJECTOR_TYPE_QWEN2VL || model.proj_type == PROJECTOR_TYPE_QWEN25VL || model.proj_type == PROJECTOR_TYPE_QWEN2A) && !ggml_backend_is_cpu(ctx_clip.backend)) {
+            LOG_WRN("%s", "Qwen2VL/Qwen25VL merger is not supported on current backend, fallback to CPU backend\n");
+            ggml_backend_free(ctx_clip.backend);
+            ctx_clip.backend = ctx_clip.backend_cpu;
+            ctx_clip.backend_ptrs.erase(ctx_clip.backend_ptrs.begin());
+            ctx_clip.backend_buft.erase(ctx_clip.backend_buft.begin());
+            ctx_clip.sched.reset(
+                ggml_backend_sched_new(ctx_clip.backend_ptrs.data(), ctx_clip.backend_buft.data(), ctx_clip.backend_ptrs.size(), 8192, false, true)
+            );
+        }
+#endif
+
         // TODO @ngxson : support both audio and video in the future
         const char * prefix = model.modality == CLIP_MODALITY_AUDIO ? "a" : "v";
 
@@ -2686,7 +2705,7 @@ struct clip_init_result clip_init(const char * fname, struct clip_context_params
 
         if (loader.has_vision) {
             ctx_vision = new clip_ctx(ctx_params);
-            loader.load_hparams(ctx_vision->model, CLIP_MODALITY_VISION);
+            loader.load_hparams(ctx_vision->model, CLIP_MODALITY_VISION, ctx_params.max_image_size);
             loader.load_tensors(*ctx_vision);
             loader.alloc_compute_meta(*ctx_vision);
         }
@@ -2801,6 +2820,11 @@ static void normalize_image_u8_to_f32(const clip_image_u8 & src, clip_image_f32
 struct image_manipulation {
     // Bilinear resize function
     static void bilinear_resize(const clip_image_u8& src, clip_image_u8& dst, int target_width, int target_height) {
+        if (src.nx == target_width && src.ny == target_height) {
+            dst = src; // no resize needed
+            return;
+        }
+
         dst.nx = target_width;
         dst.ny = target_height;
         dst.buf.resize(3 * target_width * target_height);
@@ -2837,6 +2861,11 @@ struct image_manipulation {
     // Bicubic resize function
     // part of image will be cropped if the aspect ratio is different
     static bool bicubic_resize(const clip_image_u8 & img, clip_image_u8 & dst, int target_width, int target_height) {
+        if (img.nx == target_width && img.ny == target_height) {
+            dst = img; // no resize needed
+            return true;
+        }
+
         const int nx = img.nx;
         const int ny = img.ny;
 
@@ -2972,6 +3001,9 @@ struct image_manipulation {
         if (inp_size.width <= 0 || inp_size.height <= 0 || align_size <= 0 || max_dimension <= 0) {
             return {0, 0};
         }
+        if (inp_size.width <= max_dimension && inp_size.height <= max_dimension) {
+            return {CLIP_ALIGN(inp_size.width, align_size), CLIP_ALIGN(inp_size.height, align_size)};
+        }
 
         float scale = std::min(1.0f, std::min(static_cast<float>(max_dimension) / inp_size.width,
                                               static_cast<float>(max_dimension) / inp_size.height));
@@ -3298,7 +3330,7 @@ bool clip_image_preprocess(struct clip_ctx * ctx, const clip_image_u8 * img, str
         clip_image_u8 resized;
         auto patch_size = params.patch_size * 2;
         auto new_size = image_manipulation::calc_size_preserved_ratio(original_size, patch_size, params.image_size);
-        image_manipulation::bicubic_resize(*img, resized, new_size.width, new_size.height);
+        image_manipulation::bilinear_resize(*img, resized, new_size.width, new_size.height);
 
         clip_image_f32_ptr img_f32(clip_image_f32_init());
         // clip_image_f32_ptr res(clip_image_f32_init());
@@ -4080,6 +4112,30 @@ bool clip_is_gemma3(const struct clip_ctx * ctx) {
     return ctx->proj_type() == PROJECTOR_TYPE_GEMMA3;
 }
 
+bool clip_is_smolvlm(const struct clip_ctx * ctx) {
+    return ctx->proj_type() == PROJECTOR_TYPE_IDEFICS3;
+}
+
+bool clip_is_pixtral(const struct clip_ctx * ctx) {
+    return ctx->proj_type() == PROJECTOR_TYPE_PIXTRAL;
+}
+
+bool clip_is_internvl(const struct clip_ctx * ctx) {
+    return ctx->proj_type() == PROJECTOR_TYPE_INTERNVL;
+}
+
+bool clip_is_llama4(const struct clip_ctx * ctx) {
+    return ctx->proj_type() == PROJECTOR_TYPE_LLAMA4;
+}
+
+bool clip_is_ultravox(const struct clip_ctx * ctx) {
+    return ctx->proj_type() == PROJECTOR_TYPE_ULTRAVOX;
+}
+
+bool clip_is_qwen2a(const struct clip_ctx * ctx) {
+    return ctx->proj_type() == PROJECTOR_TYPE_QWEN2A;
+}
+
 bool clip_has_vision_encoder(const struct clip_ctx * ctx) {
     return ctx->model.modality == CLIP_MODALITY_VISION;
 }
diff --git a/tools/mtmd/clip.h b/tools/mtmd/clip.h
index cb2eb261..e6f27711 100644
--- a/tools/mtmd/clip.h
+++ b/tools/mtmd/clip.h
@@ -25,8 +25,11 @@ enum clip_modality {
 struct clip_context_params {
     bool use_gpu;
     enum ggml_log_level verbosity;
+    int max_image_size = 0;
 };
 
+void clip_log_set(ggml_log_callback log_callback, void * user_data);
+
 struct clip_init_result {
     struct clip_ctx * ctx_v; // vision context
     struct clip_ctx * ctx_a; // audio context
@@ -103,6 +106,12 @@ bool clip_is_glm(const struct clip_ctx * ctx);
 bool clip_is_qwen2vl(const struct clip_ctx * ctx);
 bool clip_is_llava(const struct clip_ctx * ctx);
 bool clip_is_gemma3(const struct clip_ctx * ctx);
+bool clip_is_smolvlm(const struct clip_ctx * ctx);
+bool clip_is_pixtral(const struct clip_ctx * ctx);
+bool clip_is_internvl(const struct clip_ctx * ctx);
+bool clip_is_llama4(const struct clip_ctx * ctx);
+bool clip_is_ultravox(const struct clip_ctx * ctx);
+bool clip_is_qwen2a(const struct clip_ctx * ctx);
 
 bool clip_encode_float_image (struct clip_ctx * ctx, int n_threads, float * img, int h, int w, float * vec);
 
diff --git a/tools/mtmd/mtmd-helper.cpp b/tools/mtmd/mtmd-helper.cpp
index 686f42f3..eead1f8e 100644
--- a/tools/mtmd/mtmd-helper.cpp
+++ b/tools/mtmd/mtmd-helper.cpp
@@ -458,3 +458,7 @@ mtmd_bitmap * mtmd_helper_bitmap_init_from_file(mtmd_context * ctx, const char *
 
     return mtmd_helper_bitmap_init_from_buf(ctx, buf.data(), buf.size());
 }
+
+bool decode_audio_from_buf(const unsigned char * buf_in, size_t len, int target_sampler_rate, std::vector<float> & pcmf32_mono) {
+    return audio_helpers::decode_audio_from_buf(buf_in, len, target_sampler_rate, pcmf32_mono);
+}
\ No newline at end of file
diff --git a/tools/mtmd/mtmd-helper.h b/tools/mtmd/mtmd-helper.h
index 5c0edc69..f474b0c9 100644
--- a/tools/mtmd/mtmd-helper.h
+++ b/tools/mtmd/mtmd-helper.h
@@ -80,6 +80,8 @@ MTMD_API int32_t mtmd_helper_decode_image_chunk(mtmd_context * ctx,
                                                 int32_t n_batch,
                                                 llama_pos * new_n_past);
 
+MTMD_API bool decode_audio_from_buf(const unsigned char * buf_in, size_t len, int target_sampler_rate, std::vector<float> & pcmf32_mono);
+
 #ifdef __cplusplus
 } // extern "C"
 #endif
