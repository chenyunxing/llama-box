diff --git a/tools/mtmd/clip-impl.h b/tools/mtmd/clip-impl.h
index 62c936ed..2c5e8099 100644
--- a/tools/mtmd/clip-impl.h
+++ b/tools/mtmd/clip-impl.h
@@ -226,17 +226,7 @@ static void clip_log_internal(enum ggml_log_level level, const char * format, ..
     va_end(args);
 }
 
-#define LOG_TMPL(level, ...) \
-    do { \
-        if ((level) >= g_logger_state.verbosity_thold) { \
-            clip_log_internal((level), __VA_ARGS__); \
-        } \
-    } while (0)
-#define LOG_INF(...) LOG_TMPL(GGML_LOG_LEVEL_INFO,  __VA_ARGS__)
-#define LOG_WRN(...) LOG_TMPL(GGML_LOG_LEVEL_WARN,  __VA_ARGS__)
-#define LOG_ERR(...) LOG_TMPL(GGML_LOG_LEVEL_ERROR, __VA_ARGS__)
-#define LOG_DBG(...) LOG_TMPL(GGML_LOG_LEVEL_DEBUG, __VA_ARGS__)
-#define LOG_CNT(...) LOG_TMPL(GGML_LOG_LEVEL_CONT,  __VA_ARGS__)
+#include "log.h"
 
 //
 // cpp wrappers
@@ -292,37 +282,7 @@ struct clip_image_f32_batch {
 // common utils
 //
 
-static std::string string_format(const char * fmt, ...) {
-    va_list ap;
-    va_list ap2;
-    va_start(ap, fmt);
-    va_copy(ap2, ap);
-    int size = vsnprintf(NULL, 0, fmt, ap);
-    GGML_ASSERT(size >= 0 && size < INT_MAX); // NOLINT
-    std::vector<char> buf(size + 1);
-    int size2 = vsnprintf(buf.data(), size + 1, fmt, ap2);
-    GGML_ASSERT(size2 == size);
-    va_end(ap2);
-    va_end(ap);
-    return std::string(buf.data(), buf.size());
-}
-
-static void string_replace_all(std::string & s, const std::string & search, const std::string & replace) {
-    if (search.empty()) {
-        return;
-    }
-    std::string builder;
-    builder.reserve(s.length());
-    size_t pos = 0;
-    size_t last_pos = 0;
-    while ((pos = s.find(search, last_pos)) != std::string::npos) {
-        builder.append(s, last_pos, pos - last_pos);
-        builder.append(replace);
-        last_pos = pos + search.length();
-    }
-    builder.append(s, last_pos, std::string::npos);
-    s = std::move(builder);
-}
+#include "common.h"
 
 // split string by a `std::string delim` instead of `char delim`
 static std::vector<std::string> string_split_str(std::string s, const std::string & delimiter) {
diff --git a/tools/mtmd/clip.cpp b/tools/mtmd/clip.cpp
index 6ae2c2ce..c9d1582c 100644
--- a/tools/mtmd/clip.cpp
+++ b/tools/mtmd/clip.cpp
@@ -167,7 +167,7 @@ enum patch_merge_type {
 
 struct clip_hparams {
     int32_t image_size;
-    int32_t patch_size;
+    int32_t patch_size = 1;
     int32_t n_embd;
     int32_t n_ff;
     int32_t projection_dim;
@@ -2064,7 +2064,7 @@ struct clip_model_loader {
         }
     }
 
-    void load_hparams(clip_model & model, clip_modality modality) {
+    void load_hparams(clip_model & model, clip_modality modality, int32_t max_image_size = 0) {
         auto & hparams = model.hparams;
         std::string log_ffn_op; // for logging
 
@@ -2199,8 +2199,9 @@ struct clip_model_loader {
                     } break;
                 case PROJECTOR_TYPE_PIXTRAL:
                     {
+                        hparams.image_size = max_image_size <= 0 ? hparams.image_size : max_image_size;
                         hparams.rope_theta = 10000.0f;
-                        hparams.warmup_image_size = hparams.patch_size * 8;
+                        hparams.warmup_image_size = max_image_size <= 0 ? hparams.patch_size * 8 : max_image_size;
                         get_u32(KEY_SPATIAL_MERGE_SIZE, hparams.spatial_merge_size, false);
                     } break;
                 case PROJECTOR_TYPE_GEMMA3:
@@ -2217,8 +2218,8 @@ struct clip_model_loader {
                         // ref: https://huggingface.co/Qwen/Qwen2-VL-7B-Instruct/blob/main/preprocessor_config.json
                         // however, the model use unreasonable memory past 1024 size, we force it to 1024 otherwise it's unusable
                         // ref: https://huggingface.co/Qwen/Qwen2-VL-2B-Instruct/discussions/10
-                        hparams.image_size = 1024;
-                        hparams.warmup_image_size = hparams.patch_size * 8;
+                        hparams.image_size = max_image_size <= 0 ? 1024 : max_image_size;
+                        hparams.warmup_image_size = max_image_size <= 0 ? hparams.patch_size * 8 : max_image_size;
                     } break;
                 case PROJECTOR_TYPE_QWEN25VL:
                     {
@@ -2226,8 +2227,8 @@ struct clip_model_loader {
                         // https://huggingface.co/Qwen/Qwen2.5-VL-7B-Instruct/blob/main/preprocessor_config.json
                         // however, the model use unreasonable memory past 1024 size, we force it to 1024 otherwise it's unusable
                         // ref: https://huggingface.co/Qwen/Qwen2-VL-2B-Instruct/discussions/10
-                        hparams.image_size = 1024;
-                        hparams.warmup_image_size = hparams.patch_size * 8;
+                        hparams.image_size = max_image_size <= 0 ? 1024 : max_image_size;
+                        hparams.warmup_image_size = max_image_size <= 0 ? hparams.patch_size * 8 : max_image_size;
                         get_u32(KEY_WIN_ATTN_PATTERN, hparams.n_wa_pattern);
                     } break;
                 case PROJECTOR_TYPE_LLAMA4:
@@ -2292,6 +2293,19 @@ struct clip_model_loader {
         std::map<std::string, size_t> tensor_offset;
         std::vector<ggml_tensor *> tensors_to_load;
 
+#if (!defined GGML_USE_CUDA) && (!defined GGML_USE_METAL)
+        if ((model.proj_type == PROJECTOR_TYPE_QWEN2VL || model.proj_type == PROJECTOR_TYPE_QWEN25VL) && !ggml_backend_is_cpu(ctx_clip.backend)) {
+            LOG_WRN("%s", "Qwen2VL/Qwen25VL merger is not supported on current backend, fallback to CPU backend\n");
+            ggml_backend_free(ctx_clip.backend);
+            ctx_clip.backend = ctx_clip.backend_cpu;
+            ctx_clip.backend_ptrs.erase(ctx_clip.backend_ptrs.begin());
+            ctx_clip.backend_buft.erase(ctx_clip.backend_buft.begin());
+            ctx_clip.sched.reset(
+                ggml_backend_sched_new(ctx_clip.backend_ptrs.data(), ctx_clip.backend_buft.data(), ctx_clip.backend_ptrs.size(), 8192, false, true)
+            );
+        }
+#endif
+
         // TODO @ngxson : support both audio and video in the future
         const char * prefix = model.modality == CLIP_MODALITY_AUDIO ? "a" : "v";
 
@@ -2689,7 +2703,7 @@ struct clip_init_result clip_init(const char * fname, struct clip_context_params
 
         if (loader.has_vision) {
             ctx_vision = new clip_ctx(ctx_params);
-            loader.load_hparams(ctx_vision->model, CLIP_MODALITY_VISION);
+            loader.load_hparams(ctx_vision->model, CLIP_MODALITY_VISION, ctx_params.max_image_size);
             loader.load_tensors(*ctx_vision);
             loader.alloc_compute_meta(*ctx_vision);
         }
@@ -2828,6 +2842,11 @@ static void normalize_image_u8_to_f32(const clip_image_u8 & src, clip_image_f32
 struct image_manipulation {
     // Bilinear resize function
     static void bilinear_resize(const clip_image_u8& src, clip_image_u8& dst, int target_width, int target_height) {
+        if (src.nx == target_width && src.ny == target_height) {
+            dst = src; // no resize needed
+            return;
+        }
+
         dst.nx = target_width;
         dst.ny = target_height;
         dst.buf.resize(3 * target_width * target_height);
@@ -2864,6 +2883,11 @@ struct image_manipulation {
     // Bicubic resize function
     // part of image will be cropped if the aspect ratio is different
     static bool bicubic_resize(const clip_image_u8 & img, clip_image_u8 & dst, int target_width, int target_height) {
+        if (img.nx == target_width && img.ny == target_height) {
+            dst = img; // no resize needed
+            return true;
+        }
+
         const int nx = img.nx;
         const int ny = img.ny;
 
@@ -2999,6 +3023,9 @@ struct image_manipulation {
         if (inp_size.width <= 0 || inp_size.height <= 0 || align_size <= 0 || max_dimension <= 0) {
             return {0, 0};
         }
+        if (inp_size.width <= max_dimension && inp_size.height <= max_dimension) {
+            return {CLIP_ALIGN(inp_size.width, align_size), CLIP_ALIGN(inp_size.height, align_size)};
+        }
 
         float scale = std::min(1.0f, std::min(static_cast<float>(max_dimension) / inp_size.width,
                                               static_cast<float>(max_dimension) / inp_size.height));
@@ -3325,7 +3352,7 @@ bool clip_image_preprocess(struct clip_ctx * ctx, const clip_image_u8 * img, str
         clip_image_u8 resized;
         auto patch_size = params.patch_size * 2;
         auto new_size = image_manipulation::calc_size_preserved_ratio(original_size, patch_size, params.image_size);
-        image_manipulation::bicubic_resize(*img, resized, new_size.width, new_size.height);
+        image_manipulation::bilinear_resize(*img, resized, new_size.width, new_size.height);
 
         clip_image_f32_ptr img_f32(clip_image_f32_init());
         // clip_image_f32_ptr res(clip_image_f32_init());
@@ -4107,6 +4134,30 @@ bool clip_is_gemma3(const struct clip_ctx * ctx) {
     return ctx->proj_type() == PROJECTOR_TYPE_GEMMA3;
 }
 
+bool clip_is_smolvlm(const struct clip_ctx * ctx) {
+    return ctx->proj_type() == PROJECTOR_TYPE_IDEFICS3;
+}
+
+bool clip_is_pixtral(const struct clip_ctx * ctx) {
+    return ctx->proj_type() == PROJECTOR_TYPE_PIXTRAL;
+}
+
+bool clip_is_internvl(const struct clip_ctx * ctx) {
+    return ctx->proj_type() == PROJECTOR_TYPE_INTERNVL;
+}
+
+bool clip_is_llama4(const struct clip_ctx * ctx) {
+    return ctx->proj_type() == PROJECTOR_TYPE_LLAMA4;
+}
+
+bool clip_is_ultravox(const struct clip_ctx * ctx) {
+    return ctx->proj_type() == PROJECTOR_TYPE_ULTRAVOX;
+}
+
+bool clip_is_qwen2a(const struct clip_ctx * ctx) {
+    return ctx->proj_type() == PROJECTOR_TYPE_QWEN2A;
+}
+
 bool clip_has_vision_encoder(const struct clip_ctx * ctx) {
     return ctx->model.modality == CLIP_MODALITY_VISION;
 }
diff --git a/tools/mtmd/clip.h b/tools/mtmd/clip.h
index cb2eb261..326bb8ac 100644
--- a/tools/mtmd/clip.h
+++ b/tools/mtmd/clip.h
@@ -25,6 +25,7 @@ enum clip_modality {
 struct clip_context_params {
     bool use_gpu;
     enum ggml_log_level verbosity;
+    int max_image_size = 0;
 };
 
 struct clip_init_result {
@@ -103,6 +104,12 @@ bool clip_is_glm(const struct clip_ctx * ctx);
 bool clip_is_qwen2vl(const struct clip_ctx * ctx);
 bool clip_is_llava(const struct clip_ctx * ctx);
 bool clip_is_gemma3(const struct clip_ctx * ctx);
+bool clip_is_smolvlm(const struct clip_ctx * ctx);
+bool clip_is_pixtral(const struct clip_ctx * ctx);
+bool clip_is_internvl(const struct clip_ctx * ctx);
+bool clip_is_llama4(const struct clip_ctx * ctx);
+bool clip_is_ultravox(const struct clip_ctx * ctx);
+bool clip_is_qwen2a(const struct clip_ctx * ctx);
 
 bool clip_encode_float_image (struct clip_ctx * ctx, int n_threads, float * img, int h, int w, float * vec);
 
