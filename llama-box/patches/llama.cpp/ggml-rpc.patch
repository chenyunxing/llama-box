diff --git a/ggml/src/ggml-rpc/ggml-rpc.cpp b/ggml/src/ggml-rpc/ggml-rpc.cpp
index 3189ae85..fdfc2a9a 100644
--- a/ggml/src/ggml-rpc/ggml-rpc.cpp
+++ b/ggml/src/ggml-rpc/ggml-rpc.cpp
@@ -4,6 +4,8 @@
 #include "ggml-cpp.h"
 
 #include <cinttypes>
+#include <cerrno>
+#include <cstring>
 #include <string>
 #include <vector>
 #include <memory>
@@ -92,6 +94,7 @@ enum rpc_cmd {
     RPC_CMD_GET_DEVICE_MEMORY,
     RPC_CMD_INIT_TENSOR,
     RPC_CMD_GET_ALLOC_SIZE,
+    RPC_CMD_SUPPORT_OP,
     RPC_CMD_COUNT,
 };
 
@@ -171,6 +174,11 @@ struct rpc_msg_get_device_memory_rsp {
     uint64_t free_mem;
     uint64_t total_mem;
 };
+
+struct rpc_msg_support_op_rsp {
+    uint8_t result;
+};
+
 #pragma pack(pop)
 
 // RPC data structures
@@ -309,6 +317,13 @@ static bool send_data(sockfd_t sockfd, const void * data, size_t size) {
     while (bytes_sent < size) {
         ssize_t n = send(sockfd, (const char *)data + bytes_sent, size - bytes_sent, 0);
         if (n < 0) {
+            int err = errno;
+            if (err == EINTR || err == EAGAIN || err == EWOULDBLOCK) {
+                continue; // try again
+            }
+            if (err != 0) {
+                GGML_LOG_ERROR("[%s] failed to send data, bytes_sent = %zu, errno = %d, errmsg = %s\n", __func__, bytes_sent, err, strerror(err));
+            }
             return false;
         }
         bytes_sent += n;
@@ -321,6 +336,13 @@ static bool recv_data(sockfd_t sockfd, void * data, size_t size) {
     while (bytes_recv < size) {
         ssize_t n = recv(sockfd, (char *)data + bytes_recv, size - bytes_recv, 0);
         if (n <= 0) {
+            int err = errno;
+            if (err == EINTR || err == EAGAIN || err == EWOULDBLOCK) {
+                continue; // try again
+            }
+            if (err != 0) {
+                GGML_LOG_ERROR("[%s] failed to recv data, bytes_recv = %zu errno = %d, errmsg = %s\n", __func__, bytes_recv, err, strerror(err));
+            }
             return false;
         }
         bytes_recv += n;
@@ -330,25 +352,37 @@ static bool recv_data(sockfd_t sockfd, void * data, size_t size) {
 
 static bool send_msg(sockfd_t sockfd, const void * msg, size_t msg_size) {
     if (!send_data(sockfd, &msg_size, sizeof(msg_size))) {
+        GGML_LOG_ERROR("[%s] failed to send msg size\n", __func__);
         return false;
     }
-    return send_data(sockfd, msg, msg_size);
+    bool ret = send_data(sockfd, msg, msg_size);
+    if (!ret) {
+        GGML_LOG_ERROR("[%s] failed to send msg data\n", __func__);
+    }
+    return ret;
 }
 
 static bool recv_msg(sockfd_t sockfd, void * msg, size_t msg_size) {
     uint64_t size;
     if (!recv_data(sockfd, &size, sizeof(size))) {
+        GGML_LOG_ERROR("[%s] failed to recv msg size\n", __func__);
         return false;
     }
     if (size != msg_size) {
+        GGML_LOG_ERROR("[%s] failed: msg size mismatch, expected %zu, got %" PRIu64 "\n", __func__, msg_size, size);
         return false;
     }
-    return recv_data(sockfd, msg, msg_size);
+    bool ret = recv_data(sockfd, msg, msg_size);
+    if (!ret) {
+        GGML_LOG_ERROR("[%s] failed to recv msg data\n", __func__);
+    }
+    return ret;
 }
 
 static bool recv_msg(sockfd_t sockfd, std::vector<uint8_t> & input) {
     uint64_t size;
     if (!recv_data(sockfd, &size, sizeof(size))) {
+        GGML_LOG_ERROR("[%s] failed to recv msg size\n", __func__);
         return false;
     }
     try {
@@ -357,7 +391,11 @@ static bool recv_msg(sockfd_t sockfd, std::vector<uint8_t> & input) {
         fprintf(stderr, "Failed to allocate input buffer of size %" PRIu64 "\n", size);
         return false;
     }
-    return recv_data(sockfd, input.data(), size);
+    bool ret = recv_data(sockfd, input.data(), size);
+    if (!ret) {
+        GGML_LOG_ERROR("[%s] failed to recv msg data\n", __func__);
+    }
+    return ret;
 }
 
 static bool parse_endpoint(const std::string & endpoint, std::string & host, int & port) {
@@ -375,12 +413,15 @@ static bool parse_endpoint(const std::string & endpoint, std::string & host, int
 static bool send_rpc_cmd(const std::shared_ptr<socket_t> & sock, enum rpc_cmd cmd, const void * input, size_t input_size, void * output, size_t output_size) {
     uint8_t cmd_byte = cmd;
     if (!send_data(sock->fd, &cmd_byte, sizeof(cmd_byte))) {
+        GGML_LOG_ERROR("[%s] failed to send command %d\n", __func__, cmd);
         return false;
     }
     if (!send_data(sock->fd, &input_size, sizeof(input_size))) {
+        GGML_LOG_ERROR("[%s] failed to send input size %zu\n", __func__, input_size);
         return false;
     }
     if (!send_data(sock->fd, input, input_size)) {
+        GGML_LOG_ERROR("[%s] failed to send input data\n", __func__);
         return false;
     }
     // TODO: currently the output_size is always known, do we need support for commands with variable output size?
@@ -442,7 +483,7 @@ static void ggml_backend_rpc_buffer_free_buffer(ggml_backend_buffer_t buffer) {
     ggml_backend_rpc_buffer_context * ctx = (ggml_backend_rpc_buffer_context *)buffer->context;
     rpc_msg_free_buffer_req request = {ctx->remote_ptr};
     bool status = send_rpc_cmd(ctx->sock, RPC_CMD_FREE_BUFFER, &request, sizeof(request), nullptr, 0);
-    GGML_ASSERT(status);
+    GGML_UNUSED(status);
     delete ctx;
 }
 
@@ -463,7 +504,7 @@ static rpc_tensor serialize_tensor(const ggml_tensor * tensor) {
     rpc_tensor result;
     result.id = reinterpret_cast<uint64_t>(tensor);
     result.type = tensor->type;
-    if (tensor->buffer) {
+    if (tensor->buffer && tensor->buffer->context) {
         ggml_backend_buffer_t buffer = tensor->buffer;
         ggml_backend_rpc_buffer_context * ctx = (ggml_backend_rpc_buffer_context *)buffer->context;
         result.buffer = ctx->remote_ptr;
@@ -809,6 +850,31 @@ void ggml_backend_rpc_get_device_memory(const char * endpoint, size_t * free, si
     get_device_memory(sock, free, total);
 }
 
+static bool ggml_backend_rpc_support_op(const char * endpoint, const ggml_tensor * tensor) {
+    std::vector<uint8_t> input;
+    {
+        std::vector<rpc_tensor> tensors;
+        for (int i = 0; i < GGML_MAX_SRC; i++) {
+            if (tensor->src[i] == nullptr) {
+                break;
+            }
+            tensors.push_back(serialize_tensor(tensor->src[i]));
+        }
+        tensors.push_back(serialize_tensor(tensor));
+        // serialization format: | n_tensors (4 bytes) | tensors (n_tensors * sizeof(rpc_tensor)) |
+        uint32_t n_tensors = tensors.size();
+        int input_size = sizeof(uint32_t) + n_tensors * sizeof(rpc_tensor);
+        input.resize(input_size, 0);
+        memcpy(input.data(), &n_tensors, sizeof(n_tensors));
+        memcpy(input.data() + sizeof(n_tensors), tensors.data(), n_tensors * sizeof(rpc_tensor));
+    }
+    rpc_msg_support_op_rsp response;
+    auto sock = get_socket(endpoint);
+    bool status = send_rpc_cmd(sock, RPC_CMD_SUPPORT_OP, input.data(), input.size(), &response, sizeof(response));
+    GGML_ASSERT(status);
+    return response.result;
+}
+
 // RPC server-side implementation
 
 class rpc_server {
@@ -831,6 +897,7 @@ public:
     bool graph_compute(const std::vector<uint8_t> & input, rpc_msg_graph_compute_rsp & response);
     bool init_tensor(const rpc_msg_init_tensor_req & request);
     bool get_alloc_size(const rpc_msg_get_alloc_size_req & request, rpc_msg_get_alloc_size_rsp & response);
+    bool support_op(const std::vector<uint8_t> & input, rpc_msg_support_op_rsp & response);
 
 private:
     bool get_cached_file(uint64_t hash, std::vector<uint8_t> & data);
@@ -876,6 +943,42 @@ bool rpc_server::get_alloc_size(const rpc_msg_get_alloc_size_req & request, rpc_
     return true;
 }
 
+bool rpc_server::support_op(const std::vector<uint8_t> & input, rpc_msg_support_op_rsp & response) {
+    // serialization format: | n_tensors (4 bytes) | tensors (n_tensors * sizeof(rpc_tensor)) |
+    if (input.size() < sizeof(uint32_t)) {
+        GGML_LOG_ERROR("[%s] invalid input size\n", __func__);
+        return false;
+    }
+    uint32_t n_tensors;
+    memcpy(&n_tensors, input.data(), sizeof(n_tensors));
+    if (input.size() < sizeof(uint32_t) + n_tensors * sizeof(rpc_tensor)) {
+        GGML_LOG_ERROR("[%s] invalid input size\n", __func__);
+        return false;
+    }
+    const rpc_tensor * tensors = (const rpc_tensor *)(input.data() + sizeof(uint32_t));
+    GGML_PRINT_DEBUG("[%s] n_tensors: %u\n", __func__, n_tensors);
+
+    size_t buf_size = ggml_tensor_overhead()*n_tensors;
+    struct ggml_init_params params {
+        /*.mem_size   =*/ buf_size,
+        /*.mem_buffer =*/ NULL,
+        /*.no_alloc   =*/ true,
+    };
+    struct ggml_context * ctx = ggml_init(params);
+    ggml_tensor * tensor = deserialize_tensor(ctx, &tensors[n_tensors-1]);
+    for (uint32_t i = 0; i < n_tensors-1; i++) {
+        ggml_tensor * src = deserialize_tensor(ctx, &tensors[i]);
+        tensor->src[i] = src;
+    }
+    response.result = true;
+    if (backend->device->iface.supports_op) {
+        response.result = backend->device->iface.supports_op(backend->device, tensor);
+    }
+    ggml_free(ctx);
+
+    return true;
+}
+
 void rpc_server::alloc_buffer(const rpc_msg_alloc_buffer_req & request, rpc_msg_alloc_buffer_rsp & response) {
     ggml_backend_buffer_type_t buft = ggml_backend_get_default_buffer_type(backend);
     ggml_backend_buffer_t buffer = ggml_backend_buft_alloc_buffer(buft, request.size);
@@ -1462,6 +1565,20 @@ static void rpc_serve_client(ggml_backend_t backend, const char * cache_dir,
                 }
                 break;
             }
+            case RPC_CMD_SUPPORT_OP: {
+                std::vector<uint8_t> input;
+                if (!recv_msg(sockfd, input)) {
+                    return;
+                }
+                rpc_msg_support_op_rsp response;
+                if (!server.support_op(input, response)) {
+                    return;
+                }
+                if (!send_msg(sockfd, &response, sizeof(response))) {
+                    return;
+                }
+                break;
+            }
             default: {
                 fprintf(stderr, "Unknown command: %d\n", cmd);
                 return;
@@ -1574,10 +1691,26 @@ static ggml_backend_buffer_type_t ggml_backend_rpc_device_get_buffer_type(ggml_b
 }
 
 static bool ggml_backend_rpc_device_supports_op(ggml_backend_dev_t dev, const struct ggml_tensor * op) {
+    static std::unordered_map<std::string, std::unordered_map<std::string, bool>> caches;
+    ggml_backend_rpc_device_context * ctx = (ggml_backend_rpc_device_context *)dev->context;
+
+    auto &cache = caches[ctx->endpoint];
+    std::string key = op->name;
+    key += std::to_string(op->type);
+    for (int i = 0; i < GGML_MAX_DIMS; i++) {
+        key += std::to_string(op->ne[i]);
+    }
+    key += std::to_string(op->op);
+
+    auto it = cache.find(key);
+    if (it != cache.end()) {
+        return it->second;
+    }
+    bool result = ggml_backend_rpc_support_op(ctx->endpoint.c_str(), op);
+    cache[key] = result;
+    return result;
+
     GGML_UNUSED(dev);
-    GGML_UNUSED(op);
-    //TODO: call the remote backend and cache the results
-    return true;
 }
 
 static bool ggml_backend_rpc_device_supports_buft(ggml_backend_dev_t dev, ggml_backend_buffer_type_t buft) {
