diff --git a/common/sampling.cpp b/common/sampling.cpp
index 9c04d35fd..2bf1a9850 100644
--- a/common/sampling.cpp
+++ b/common/sampling.cpp
@@ -232,7 +232,7 @@ struct common_sampler * common_sampler_init(const struct llama_model * model, co
         for (const auto & cnstr : params.samplers) {
             switch (cnstr) {
                 case COMMON_SAMPLER_TYPE_DRY:
-                    {
+                    if (params.dry_multiplier != 0.0f) {
                         std::vector<const char *> c_breakers;
                         c_breakers.reserve(params.dry_sequence_breakers.size());
                         for (const auto & str : params.dry_sequence_breakers) {
@@ -243,22 +243,22 @@ struct common_sampler * common_sampler_init(const struct llama_model * model, co
                     }
                     break;
                 case COMMON_SAMPLER_TYPE_TOP_K:
-                    llama_sampler_chain_add(result->chain, llama_sampler_init_top_k       (params.top_k));
+                    params.top_k > 0.0f ? llama_sampler_chain_add(result->chain, llama_sampler_init_top_k       (params.top_k)) : void();
                     break;
                 case COMMON_SAMPLER_TYPE_TOP_P:
-                    llama_sampler_chain_add(result->chain, llama_sampler_init_top_p       (params.top_p, params.min_keep));
+                    params.top_p != 1.0f ? llama_sampler_chain_add(result->chain, llama_sampler_init_top_p       (params.top_p, params.min_keep)) : void();
                     break;
                 case COMMON_SAMPLER_TYPE_TOP_N_SIGMA:
-                    llama_sampler_chain_add(result->chain, llama_sampler_init_top_n_sigma (params.top_n_sigma));
+                    params.top_n_sigma != -1.0f ? llama_sampler_chain_add(result->chain, llama_sampler_init_top_n_sigma (params.top_n_sigma)) : void();
                     break;
                 case COMMON_SAMPLER_TYPE_MIN_P:
-                    llama_sampler_chain_add(result->chain, llama_sampler_init_min_p       (params.min_p, params.min_keep));
+                    params.min_p != 0.0f ? llama_sampler_chain_add(result->chain, llama_sampler_init_min_p       (params.min_p, params.min_keep)) : void();
                     break;
                 case COMMON_SAMPLER_TYPE_XTC:
-                    llama_sampler_chain_add(result->chain, llama_sampler_init_xtc         (params.xtc_probability, params.xtc_threshold, params.min_keep, params.seed));
+                    params.xtc_probability != 0.0f && params.xtc_threshold <= 0.5 ? llama_sampler_chain_add(result->chain, llama_sampler_init_xtc         (params.xtc_probability, params.xtc_threshold, params.min_keep, params.seed)) : void();
                     break;
                 case COMMON_SAMPLER_TYPE_TYPICAL_P:
-                    llama_sampler_chain_add(result->chain, llama_sampler_init_typical     (params.typ_p, params.min_keep));
+                    params.typ_p != 1.0f ? llama_sampler_chain_add(result->chain, llama_sampler_init_typical     (params.typ_p, params.min_keep)) : void();
                     break;
                 case COMMON_SAMPLER_TYPE_TEMPERATURE:
                     llama_sampler_chain_add(result->chain, llama_sampler_init_temp_ext    (params.temp, params.dynatemp_range, params.dynatemp_exponent));
@@ -267,7 +267,7 @@ struct common_sampler * common_sampler_init(const struct llama_model * model, co
                     llama_sampler_chain_add(result->chain, llama_sampler_init_infill      (vocab));
                     break;
                 case COMMON_SAMPLER_TYPE_PENALTIES:
-                    llama_sampler_chain_add(result->chain, llama_sampler_init_penalties   (params.penalty_last_n, params.penalty_repeat, params.penalty_freq, params.penalty_present));
+                    params.penalty_last_n != 0.0f && params.penalty_repeat != 1.0f ? llama_sampler_chain_add(result->chain, llama_sampler_init_penalties   (params.penalty_last_n, params.penalty_repeat, params.penalty_freq, params.penalty_present)) : void();
                     break;
                 default:
                     GGML_ASSERT(false && "unknown sampler type");
